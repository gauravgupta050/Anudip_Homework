1. If Logic Questions:

=> Even or Odd Checker: Write a Java program to check if a number is even or odd using if-else statements.

        import java.util.Scanner;
        
        public class Checker {
            public static void main(String[] args) {
                Scanner scanner = new Scanner(System.in);
                System.out.print("Enter a number: ");
                int number = scanner.nextInt();
                if (number % 2 == 0) {
                    System.out.println(number + " is even.");
                } else {
                    System.out.println(number + " is odd.");
                }
            }
        }

=> Grade Calculator: Write a program that takes a score as input and assigns a letter grade (A, B, C, D, F) based on the score using if-else if logic.

        import java.util.Scanner;
        
        public class GradeCalculator {
            public static void main(String[] args) {
                Scanner scanner = new Scanner(System.in);
                System.out.print("Enter the score (0-100): ");
                int score = scanner.nextInt();
                if (score >= 90 && score <= 100) {
                    System.out.println("Grade: A");
                } else if (score >= 80 && score < 90) {
                    System.out.println("Grade: B");
                } else if (score >= 70 && score < 80) {
                    System.out.println("Grade: C");
                } else if (score >= 60 && score < 70) {
                    System.out.println("Grade: D");
                } else if (score >= 0 && score < 60) {
                    System.out.println("Grade: F");
                } else {
                    System.out.println("Invalid score. Please enter a score between 0 and 100.");
                }
            }
        }

=> Leap Year Checker: Write a Java program to check if a given year is a leap year or not using if-else conditions.

        import java.util.Scanner;
        
        public class LeapYearChecker {
            public static void main(String[] args) {
                Scanner scanner = new Scanner(System.in);
                System.out.print("Enter a year: ");
                int year = scanner.nextInt();
        
                if (year % 4 == 0) {
                    if (year % 100 == 0) {
                            System.out.println(year + " is a leap year.");
                        } else {
                            System.out.println(year + " is not a leap year.");
                        }
                    } else {
                        System.out.println(year + " is a leap year.");
                    }
                } else {
                    System.out.println(year + " is not a leap year.");
                }
            }
        }

2. Loop Questions:

=> Sum of Numbers: Write a Java program that calculates the sum of the first n natural numbers using a for loop.

        import java.util.Scanner;
        
        public class SumOfNaturalNumbers {
            public static void main(String[] args) {
                Scanner scanner = new Scanner(System.in);
                System.out.print("Enter a number n: ");
                int n = scanner.nextInt();
                int sum = 0;
                for (int i = 1; i <= n; i++) {
                    sum += i; 
                }
        
                System.out.println("The sum of the first " + n + " natural numbers is: " + sum);
            }
        }

=> Prime Number Checker: Write a program that checks if a given number is prime using a for loop.

        import java.util.Scanner;
        
        public class PrimeNumberChecker {
            public static void main(String[] args) {
                Scanner scanner = new Scanner(System.in);
        
                System.out.print("Enter a number: ");
                int number = scanner.nextInt();
                boolean isPrime = true;
                if (number <= 1) {
                    isPrime = false;
                } else {
                    for (int i = 2; i <= Math.sqrt(number); i++) {
                        if (number % i == 0) {
                            isPrime = false;
                            break; 
                        }
                    }
                }
        
                if (isPrime) {
                    System.out.println(number + " is a prime number.");
                } else {
                    System.out.println(number + " is not a prime number.");
                }
            }
        }

=> Fibonacci Sequence: Write a program to generate the Fibonacci sequence up to a given number using a while or for loop.

        import java.util.Scanner;
        
        public class FibonacciSequence {
            public static void main(String[] args) {
                Scanner scanner = new Scanner(System.in);
        
                System.out.print("Enter the number of terms for Fibonacci sequence: ");
                int n = scanner.nextInt();
                int first = 0, second = 1;
                if (n <= 0) {
                    System.out.println("Please enter a positive integer.");
                } else {
                    System.out.println("Fibonacci sequence up to " + n + " terms:");
        
                    int count = 1;
        
                    while (count <= n) {
                        System.out.print(first + " ");
                        int next = first + second;
                        first = second;
                        second = next;
                        count++;
                    }
                }
            }
        }

=> Factorial Calculation: Write a program to find the factorial of a given number using a while loop.

        import java.util.Scanner;
        
        public class FactorialCalculator {
            public static void main(String[] args) {
                Scanner scanner = new Scanner(System.in);
        
                System.out.print("Enter a number to find its factorial: ");
                int number = scanner.nextInt();
                int factorial = 1;
                int i = number;
        
                while (i > 0) {
                    factorial *= i; 
                    i--;            
                }
        
                System.out.println("The factorial of " + number + " is: " + factorial);
            }
        }

=> Pattern Printing: Write a Java program to print the following pattern using nested loops:
*
**
***
****

        import java.util.Scanner;
        
        public class Pattern {
            public static void main(String[] args) {
               Scanner scanner = new Scanner(System.in);
                System.out.println("Enter the number of rows");
                int rows = scanner.nextInt();
        
                for (int i = 1; i <= rows; i++) {
                    for (int j = 1; j <= i; j++) {
                        System.out.print("*");
                    }
                    System.out.println();
                }
            }
        }

=>       1
        121
       12321

        import java.util.Scanner();
        
        public class NumberPattern {
            public static void main(String[] args) {
              
                Scanner scanner = new Scanner(System.in);
                System.out.println("Enter the number of rows");
                int rows = scanner.nextInt();
        
                for (int i = 1; i <= rows; i++) {
                    for (int j = 1; j <= rows - i; j++) {
                        System.out.print(" ");
                    }
                    
                    for (int j = 1; j <= i; j++) {
                        System.out.print(j);
                    }
        
                    for (int j = i - 1; j >= 1; j--) {
                        System.out.print(j);
                    }
        
                    System.out.println();
                }
            }
        }

=>    32123
       212
        1

        import java.util.Scanner();
        
        public class NumberPattern {
            public static void main(String[] args) {
                Scanner scanner = new Scanner(System.in);
                System.out.println("Enter the number of rows");
                int rows = scanner.nextInt();
                for (int i = rows; i >= 1; i--) {
                    for (int j = 1; j <= rows - i; j++) {
                        System.out.print(" ");
                    }
        
                    for (int j = i; j >= 1; j--) {
                        System.out.print(j);
                    }
        
                    for (int j = 2; j <= i; j++) {
                        System.out.print(j);
                    }
                    System.out.println();
                }
            }
        }

3. Class and Object Questions:

=> Create a Student Class: Create a Student class with attributes like name, age, and grade. Write a method to display the student's details. Create multiple objects and display their details.

class intro{

    String name;
    int age;
    String grade;

    intro(String name, int age, String grade){
        this.name = name;
        this.age = age;
        this.grade = grade;
    }

    public void display(){
        System.out.println(name + " " + age + " " + grade);
    }
    
}

class student{
    public static void main(String[] args) {
        intro st1 = new intro("Gaurav",22,"A");
        intro st2 = new intro("Varun",20,"B");
        intro st3 = new intro("Tarun",22,"C");
        
        System.out.print("First Student : ");
        st1.display();
        System.out.print("Second Student : ");
        st2.display();
        System.out.print("Third Student : ");
        st3.display();
    }
}

=> Bank Account Class: Create a BankAccount class with attributes like accountNumber, accountHolderName, and balance. Implement methods for deposit and withdraw and create objects to simulate transactions.

public class BankAccount {
   
    private String accountNumber;
    private String accountHolderName;
    private double balance;

    public BankAccount(String accountNumber, String accountHolderName, double balance) {
        this.accountNumber = accountNumber;
        this.accountHolderName = accountHolderName;
        this.balance = balance;
    }

    public void deposit(double amount) {
        balance += amount;
        System.out.println("New balance : " + balance);
    }

    public void withdraw(double amount) {
        balance -= amount;
        System.out.println("New balance : " + balance);
    }

    public void displayAccountDetails() {
        System.out.println("Account Number : " + accountNumber);
        System.out.println("Account Holder Name : " + accountHolderName);
        System.out.println("Balance : " + balance);
    }

    public static void main(String[] args) {
        BankAccount account = new BankAccount("123456789", "Gaurav", 1000000.00);
        account.displayAccountDetails();
        System.out.println();
        System.out.println("Deposit Money ----");
        account.deposit(500000.00);
        System.out.println();
        System.out.println("Withdraw Money ----");
        account.withdraw(200000.00);
        System.out.println();
        account.displayAccountDetails();
    }
}


=> Rectangle Area and Perimeter: Write a Java program that creates a Rectangle class with attributes for length and width. Add methods to calculate the area and perimeter of the rectangle.

public class Rectangle {
    
    private int length;
    private int width;

    public Rectangle(int length, int width) {
        this.length = length;
        this.width = width;
    }

    public int calculateArea() {
        return length * width;
    }

    public int calculatePerimeter() {
        return 2 * (length + width);
    }

    public void displayDetails() {
        System.out.println("Area of Rectangle : " + calculateArea());
        System.out.println("Perimeter of Rectangle : " + calculatePerimeter());
    }

    public static void main(String[] args) {
        Rectangle rec = new Rectangle(5, 3);
        rec.displayDetails();
    }
}


4. Constructor Questions:

=> Parameterized Constructor: Write a Java program to define a class Car with attributes like brand, model, and price. Implement both default and parameterized constructors to initialize objects.

public class Car {
  
    private String brand;
    private String model;
    private double price;

    public Car() {
        this.brand = "Kia";
        this.model = "Seltos";
        this.price = 1800000.80;
    }

    public Car(String brand, String model, double price) {
        this.brand = brand;
        this.model = model;
        this.price = price;
    }
    
    public void displayCarInfo() {
        System.out.println("Brand: " + brand);
        System.out.println("Model: " + model);
        System.out.println("Price: " + price);
    }

    public static void main(String[] args) {
        Car car1 = new Car();
        System.out.println("Car 1 Details");
        car1.displayCarInfo();

        System.out.println();

        Car car2 = new Car("Toyota", "Fortuner", 5500000.99);
        System.out.println("Car 2 Details:");
        car2.displayCarInfo();
    }
}


=> Constructor Overloading: Write a program to create a Book class with attributes title, author, and price. Implement multiple constructors to allow different ways to create Book objects (e.g., with just the title, or with all attributes).

public class Book {
    private String title;
    private String author;
    private double price;

    public Book(String title) {
        this.title = title;
        this.author = "Unknown";
        this.price = 0.0;
    }

    public Book(String title, String author) {
        this.title = title;
        this.author = author;
        this.price = 0.0;
    }

    public Book(String title, String author, double price) {
        this.title = title;
        this.author = author;
        this.price = price;
    }

    public void displayBookInfo() {
        System.out.println("Title: " + title);
        System.out.println("Author: " + author);
        System.out.println("Price: " + price);
    }

    public static void main(String[] args) {
        Book book1 = new Book("Moon To Mars");
        System.out.println("Book 1 Details:");
        book1.displayBookInfo();

        System.out.println();

        Book book2 = new Book("Moon To Mars", "Xyz");
        System.out.println("Book 2 Details:");
        book2.displayBookInfo();

        System.out.println();

        Book book3 = new Book("Moon To Mars", "Abc", 15.99);
        System.out.println("Book 3 Details:");
        book3.displayBookInfo();
    }
}

=> Copy Constructor: Write a Java program to demonstrate the use of a copy constructor in a Point class to initialize one object with another.

public class Point {
   
    private int x;
    private int y;

    public Point(int x, int y) {
        this.x = x;
        this.y = y;
    }

    public Point(Point other) {
        this.x = other.x;
        this.y = other.y;
    }

    public void displayPointInfo() {
        System.out.println("Point Coordinates: (" + x + ", " + y + ")");
    }

        public static void main(String[] args) {
        
        Point point1 = new Point(5, 10);
        System.out.println("Point 1 Details:");
        point1.displayPointInfo();

        System.out.println();

        Point point2 = new Point(point1);
        System.out.println("Point 2 Details:");
        point2.displayPointInfo();
    }
}


5. Inheritance Questions:

=> Employee Inheritance: Create a class Employee with attributes name, id, and salary. Create a subclass Manager that extends Employee and adds an attribute for bonus. Write methods to display employee and manager details.

class Employee {
  
    private String name;
    private int id;
    private double salary;

    public Employee(String name, int id, double salary) {
        this.name = name;
        this.id = id;
        this.salary = salary;
    }
    
    public void displayEmployeeInfo() {
        System.out.println("Employee Details:");
        System.out.println("Name: " + name);
        System.out.println("ID: " + id);
        System.out.println("Salary: " + salary);
    }
}


class Manager extends Employee {

    private double bonus;

    public Manager(String name, int id, double salary, double bonus) {
        super(name, id, salary); 
        this.bonus = bonus;
    }

    public double getBonus() {
        return bonus;
    }

    public void displayEmployeeInfo() {
        super.displayEmployeeInfo(); 
        System.out.println("Bonus: " + bonus);
    }
}

public class Main {
    public static void main(String[] args) {

        Employee emp = new Employee("Gaurav", 101, 500000);
        emp.displayEmployeeInfo();
        System.out.println();
        Manager mgr = new Manager("Varun", 102, 70000, 5000);
        mgr.displayEmployeeInfo();
    }
}

=> Shape Hierarchy: Create a class Shape with a method area. Then create subclasses Circle, Rectangle, and Square that override the area method to calculate the area of each shape.

class Shape {
    public double area(){
        System.out.println("The area is available");
        return 0;
    };
}

class Circle extends Shape {
    private double radius;

    public Circle(double radius) {
        this.radius = radius;
    }

    @Override
    public double area() {
        return Math.PI * radius * radius; 
    }
}

class Rectangle extends Shape {
    private double length;
    private double width;

    public Rectangle(double length, double width) {
        this.length = length;
        this.width = width;
    }

    @Override
    public double area() {
        return length * width; 
    }
}

class Square extends Shape {
 
    private double side;

    public Square(double side) {
        this.side = side;
    }

    @Override
    public double area() {
        return side * side; 
    }
}

public class Image {
    public static void main(String[] args) {
        Shape circle = new Circle(5);
        Shape rectangle = new Rectangle(4, 6);
        Shape square = new Square(3);

        System.out.println("Area of Circle: " + circle.area());
        System.out.println("Area of Rectangle: " + rectangle.area());
        System.out.println("Area of Square: " + square.area());
    }
}

=> Animal Inheritance: Write a program to create a base class Animal with a method makeSound(). Create derived classes Dog and Cat that override the makeSound() method. Instantiate the objects and call their respective methods.

class Animal {
    public void makeSound() {
        System.out.println("The animal makes a sound");
    }
}

class Dog extends Animal {

    @Override
    public void makeSound() {
        System.out.println("The dog barks");
    }
}

class Cat extends Animal {

    @Override
    public void makeSound() {
        System.out.println("The cat meows");
    }
}

public class AnimalDefinition {
    public static void main(String[] args) {
        Animal myDog = new Dog();
        Animal myCat = new Cat();

        myDog.makeSound(); 
        myCat.makeSound(); 
    }
}





